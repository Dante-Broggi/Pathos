{
    "author": "Daniel Duan",
    "theme": "fullwidth",
    "module": "Pathos",
    "abstract": "Documentation/_abstracts/*.md",
    "custom_categories": [
        {
            "name": "POP and OOP",
            "children": [
                "PathRepresentable",
                "Path"
            ]
        },
        {
            "name": "Finding Files",
            "children": [
                "glob(_:)",
                "files(inPath:recursive:)",
                "directories(inPath:recursive:)",
                "children(inPath:recursive:)",
                "symbolicLinks(inPath:recursive:)",
                "blockDevices(inPath:recursive:)",
                "characterDevices(inPath:recursive:)",
                "pipes(inPath:recursive:)",
                "sockets(inPath:recursive:)",
                "unknownTypeFiles(inPath:recursive:)"
            ]
        },
        {
            "name": "File IO",
            "children": [
                "readBytes(atPath:)",
                "readString(atPath:)",
                "write(_:atPath:createIfNecessary:permission:)",
                "write(_:atPath:createIfNecessary:permission:)",
                "readSymbolicLink(atPath:)",
                "createSymbolicLink(fromPath:toPath:)"
            ]
        },
        {
            "name": "Manipulating Paths",
            "children": [
                "deletePath(_:recursive:)",
                "movePath(_:toPath:)",
                "copyFile(fromPath:toPath:followSymbolicLink:chunkSize:)",
                "createDirectory(atPath:permission:createParents:throwIfAlreadyExists:)"
            ]
        },
        {
            "name": "Analyzing Paths",
            "children": [
                "isAbsolute(path:)",
                "absolutePath(ofPath:)",
                "basename(ofPath:)",
                "directory(ofPath:)",
                "fileExtension(ofPath:)",
                "normalize(path:)",
                "realPath(ofPath:)",
                "split(path:)",
                "splitExtension(ofPath:)"
            ]
        },
        {
            "name": "Temporary Paths",
            "children": [
                "withTemporaryDirectory(suffix:prefix:inDirectory:performAction:)",
                "createTemporaryFile(suffix:prefix:inDirectory:)",
                "createTemporaryDirectory(suffix:prefix:inDirectory:)",
                "defaultTemporaryDirectory",
                "searchForDefaultTemporaryDirectory()"
            ]
        },
        {
            "name": "Relationship",
            "children": [
                "relativePath(ofPath:)",
                "relativePath(ofPath:startingFromPath:)",
                "commonPath(amongPaths:_:_:)",
                "join(paths:)",
                "join(paths:_:_:)",
                "expandUserDirectory(inPath:)"
            ]
        },
        {
            "name": "Working Directory",
            "children": [
                "getCurrentWorkingDirectory()",
                "setCurrentWorkingDirectory(toPath:)",
                "withWorkingDirectory(beingPath:performAction:)"
            ]
        },
        {
            "name": "System Attributes",
            "children": [
                "size(atPath:)",
                "FilePermission",
                "permissions(forPath:)",
                "add(_:toPath:)",
                "remove(_:forPath:)",
                "set(_:forPath:)",
                "FileTime",
                "accessTime(atPath:)",
                "metadataChangeTime(atPath:)",
                "modificationTime(atPath:)"
            ]
        },
        {
            "name": "Existence",
            "children": [
                "exists(atPath:followSymbol:)",
                "isBlockDevice(atPath:)",
                "isCharacterDevice(atPath:)",
                "isDirectory(atPath:)",
                "isFile(atPath:)",
                "isPipe(atPath:)",
                "isSocket(atPath:)",
                "isSymbolicLink(atPath:)",
                "sameFile(atPath:otherPath:)"
            ]
        },
        {
            "name": "Constants",
            "children": [
                "pathSeparator",
                "pathSeparatorCharacter"
            ]
        },
        {
            "name": "Errors",
            "children": [
                "PathosError",
                "SystemError"
            ]
        }
    ]
}
